# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Docker Compose reference guide at
# https://docs.docker.com/go/compose-spec-reference/

# Here the instructions define your application as a service called "server".
# This service is built from the Dockerfile in the current directory.
# You can add other services your application may depend on here, such as a
# database or a cache. For examples, see the Awesome Compose repository:
# https://github.com/docker/awesome-compose
services:
  talentpool.api:
    container_name: talentpool.api
    build:
      context: .
      target: final
    ports:
      - 8080:8080
# The commented out section below is an example of how to define a PostgreSQL
# database that your application can use. `depends_on` tells Docker Compose to
# start the database before your application. The `db-data` volume persists the
# database data between container restarts. The `db-password` secret is used
# to set the database password. You must create `db/password.txt` and add
# a password of your choosing to it before running `docker compose up`.
    depends_on:
      talentpool.database:
        condition: service_healthy
    environment:
      ASPNETCORE_ENVIRONMENT: Development
      ConnectionStrings__DefaultConnection: "Host=talentpool.database;Port=5432;Database=talentpool;Username=postgres;Password=postgres;Include Error Detail=true"

  talentpool.database:
    image: postgres:latest
    container_name: talentpool.database
    volumes:
      - ./.containers/talentpool-db:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=talentpool
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres    
    ports:
      - 5432:5432
    expose:
      - 5432
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d talentpool"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 5s
